# 导入包
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.arima_model import ARMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
import warnings
warnings.filterwarnings("ignore")
# 读入收盘价
cl=pd.read_csv('收盘价.csv',index_col=0,parse_dates=True)
cl.head()
stocks=cl.columns
date=cl.index
year=['2010','2011','2012','2013','2014','2015','2016','2017','2018','2019','2020']
# 筛选出每年至少有50个活跃交易日的股票
stockless=[]
j=-1
for stock in stocks:
    n=[]
    j=j+1
    print(j)
    for i in range(len(year)):
        ts=list(cl.loc[year[i],stock].dropna())
        n.append(len(ts))
    n=np.array(n)
    less=n[n<=50]
    if len(less)>=1:
        stockless.append(stock)
# 存储筛选过的股票到csv文件中
cl2=cl.drop(stockless,axis=1)
cl2.to_csv('收盘价.csv')
cl2.head()
# 新的股票代码，一共有1857支符合要求的股票
stock2=cl2.columns
print(len(stock2))
## 拟合ARIMA模型的函数
# 输入时序，p值，q值
# 输出模型的估计值，95%置信区间的上下限
def fore(ts,p,q):
    model=SARIMAX(ts,order=(p,1,q))
    results = model.fit()
    forecast = results.get_prediction(start=-len(ts))
    m_f=list(forecast.predicted_mean[1:])
    ci=forecast.conf_int()
    lc=list(ci.T[0])[1:]
    hc=list(ci.T[1])[1:]
    return [m_f,lc,hc]
df_arma=pd.DataFrame(index=cl2.index)
lower_ci=pd.DataFrame(index=cl2.index)
upper_ci=pd.DataFrame(index=cl2.index)
# 对所有筛选出的股票作ARIMA模型拟合
j=0
for stock in stock2:
    j=j+1
    print(j)
    ts=list(cl2[stock].dropna())
    m_f=fore(ts,2,2)[0]
    lc=fore(ts,2,2)[1]
    hc=fore(ts,2,2)[2]
    loca=cl2.index[cl2[stock]>0]
    df_arma.loc[loca,stock]=[0]+m_f
    lower_ci.loc[loca,stock]=[0]+lc
    upper_ci.loc[loca,stock]=[0]+hc
